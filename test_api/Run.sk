using script reflection
using for loops

local function get_all_tests() :: functions:
	return scripts in folder "mib_lib\tests" mapped with (function "test" from (script "%input%"))

local function clear_test_results():
	for {_id} in indexes of {-mib_lib::result::*}:
		delete {-mib_lib::result::%{_id}%::*}

local function test_header(name: string) :: string:
	new string joined with nl stored in {_header}:
		sm("info", "")
		sm("info", "Running Test: {1}", {_name})
		sm("info", "")
	return {_header}

local function result_summary() :: string:
	for {_id} in indexes of {-mib_lib::result::*}:
		set {_total} to {_total} + 1
		set {_value} to {-mib_lib::result::%{_id}%::value}
		if {_value} = true:
			add 1 to {_passed}
		else:
			add 1 to {_failed}

	new string joined with nl stored in {_summary}:
		sm("info", "<strike>             [1]<strike>             ", " Test Summary ")
		sm("info", "Total Tests: [1]", {_total})
		sm("info", "Passed: [1]", {_passed} ? 0)
		sm("info", "Failed: [1]", {_failed} ? 0)
		sm("info", "<strike>                                             ")
	return {_summary}

#> Runs all tests in the `mib_lib/tests` directory
#> Broadcasts results to admins & console; meant to be used on startup
function run_all_tests():
	clear_test_results()

	for {_test} in get_all_tests():
		admin_log(test_header(name of {_test}.source()))
		run {_test}

	admin_log(result_summary())

on skript start:
	run_all_tests()